---
AWSTemplateFormatVersion: '2010-09-09'
Description: CFT to deploy a Lambda function and an API gateway.
Parameters:
  ApiName:
    Type: String
  ApiStageName:
    Type: String
    AllowedPattern: '^[a-z0-9]+$'
  LambdaFunctionName:
    Type: String
    AllowedPattern: '^[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+$'
  S3BucketName:
    Type: String
  S3KeyName:
    Type: String
Resources:
  FgtAutoScalePolicies:
    Properties:
      PolicyDocument:
        Statement:
        - Action:
          - autoscaling:DescribeAutoScalingInstances
          - autoscaling:DescribeAutoScalingGroups
          - autoscaling:UpdateAutoScalingGroup
          - autoscaling:CompleteLifecycleAction
          - cloudformation:CreateStack
          - cloudformation:UpdateStack
          - cloudformation:DeleteStack
          - cloudformation:DescribeStacks
          - cloudformation:DescribeStackResource
          - cloudformation:DescribeStackResources
          - cloudformation:ListStackResources
          - cloudfront:UpdateDistribution
          - ec2:AttachNetworkInterface
          - ec2:DescribeInstances
          - ec2:DetachNetworkInterface
          - ec2:ResetNetworkInterfaceAttribute
          - ec2:ModifyNetworkInterfaceAttribute
          - ec2:DeleteNetworkInterface
          - ec2:CreateNetworkInterface
          - ec2:DescribeNetworkInterfaces
          - ec2:DescribeRouteTables
          - ec2:ReplaceRoute
          - ec2:TerminateInstances
          - ec2:CreateTags
          - elasticloadbalancing:DescribeTargetGroups
          - elasticloadbalancing:RegisterTargets
          - route53:*
          - iam:*
          - apigateway:*
          Effect: Allow
          Resource: '*'
        - Action: logs:*
          Effect: Allow
          Resource: '*'
        - Action: s3:*
          Effect: Allow
          Resource: '*'
        - Action: cloudformation:*
          Effect: Allow
          Resource: '*'
        - Action: events:*
          Effect: Allow
          Resource: arn:aws:events:*:*:*
        - Action: sns:*
          Effect: Allow
          Resource: arn:aws:sns:*:*:*
        - Action: lambda:*
          Effect: Allow
          Resource: '*'
        - Action: cloudfront:*
          Effect: Allow
          Resource: '*'
        - Action: apigateway:*
          Effect: Allow
          Resource: arn:aws:apigateway:*:*:*
        - Action: dynamodb:*
          Effect: Allow
          Resource: '*'
      PolicyName: FgtAutoScalePolicy
      Roles:
      - Ref: FgtAutoScaleRole
    Type: AWS::IAM::Policy
  FgtAutoScaleRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
        - Action: sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - events.amazonaws.com
        Version: '2012-10-17'
      Path: /
      RoleName:
        Fn::Join:
        - ''
        - - FgtAutoScaleRole-
          - Ref: AWS::StackName
          - '-'
          - Ref: AWS::Region
    Type: AWS::IAM::Role
  ANY0:
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials:
          Fn::GetAtt:
          - FgtAutoScaleRole
          - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt 'LambdaFunction.Arn'
      MethodResponses: []
      ResourceId: !GetAtt
        - Api
        - RootResourceId
      RestApiId: !Ref Api
    Type: 'AWS::ApiGateway::Method'
  ANY1:
    Properties:
      ApiKeyRequired: false
      AuthorizationType: NONE
      HttpMethod: ANY
      Integration:
        CacheKeyParameters: []
        CacheNamespace: none
        Credentials:
          Fn::GetAtt:
          - FgtAutoScaleRole
          - Arn
        IntegrationHttpMethod: POST
        IntegrationResponses: []
        PassthroughBehavior: NEVER
        Type: AWS_PROXY
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${lambdaArn}/invocations'
          - lambdaArn: !GetAtt 'LambdaFunction.Arn'
      MethodResponses: []
      ResourceId: !Ref ResourceAnyPathSlashed
      RestApiId: !Ref Api
    Type: 'AWS::ApiGateway::Method'
  Api:
    Properties:
      Description: API Gateway for AutoScale Group
      Name: !Ref 'ApiName'
    Type: 'AWS::ApiGateway::RestApi'
  ApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - 'ANY0'
    Properties:
      RestApiId: !Ref 'Api'
      StageName: !Ref 'ApiStageName'
  ResourceAnyPathSlashed:
    Properties:
      ParentId: !GetAtt
        - Api
        - RootResourceId
      PathPart: '{proxy+}'
      RestApiId: !Ref Api
    Type: 'AWS::ApiGateway::Resource'
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        S3Bucket: !Ref S3BucketName
        S3Key: !Ref S3KeyName
      Description: 'Function for AutoScale Group'
      FunctionName: !Ref 'LambdaFunctionName'
      Handler: 'handler.lambda_handler'
      Role:
        Fn::GetAtt:
        - FgtAutoScaleRole
        - Arn
      Runtime: 'python2.7'
      Timeout: 300
      MemorySize: 512
  lambdaApiGatewayInvoke:
    Type: AWS::Lambda::Permission
    Properties:
      Action: 'lambda:InvokeFunction'
      FunctionName: !GetAtt 'LambdaFunction.Arn'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${Api}/*/POST/'
Outputs:
  ApiURL:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}'
  SNSEndPoint:
    Value: !Sub 'https://${Api}.execute-api.${AWS::Region}.amazonaws.com/${ApiStageName}/sns'
  LambdaArn:
    Value: !GetAtt 'LambdaFunction.Arn'
