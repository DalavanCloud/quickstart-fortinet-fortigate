{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "FortiGate Autoscale Solution (New VPC). This template deploys Fortinet Fortigate cluster into a new VPC with a Multi-AZ Autoscale group with Lambda and LifecycleHook. Please see the Quick Start documentation for more details. **WARNING** You will be billed for the FortiGate On-Demand instances and related AWS resources if you create a stack from this template.",
    "Parameters": {
        "CustomIdentifier": {
            "Type": "String",
            "Default": "fgtASG",
            "MaxLength": "10",
            "AllowedPattern": "[A-Za-z0-9]+",
            "ConstraintDescription": "must only contain uppercase and lowercase letters and numbers",
            "Description": "A custom identifier as resource name prefix. Must be at most 10 characters long and only contain uppercase, lowercase letters, and numbers."
        },
        "QSS3BucketName": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$",
            "ConstraintDescription": "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-).",
            "Default": "aws-quickstart",
            "Description": "The S3 bucket you have created for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. The bucket name can include numbers, lowercase letters, uppercase letters, and hyphens, but should not start or end with a hyphen."
        },
        "QSS3KeyPrefix": {
            "Type": "String",
            "AllowedPattern": "^[0-9a-zA-Z-/]*$",
            "ConstraintDescription": "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/).",
            "Default": "quickstart-fortinet-fortigate",
            "Description": "The S3 key name prefix used to simulate a folder for your copy of Quick Start assets, if you decide to customize or extend the Quick Start for your own use. This prefix can include numbers, lowercase letters, uppercase letters, hyphens, and forward slashes."
        },
        "AvailabilityZones": {
            "Description": "The list of Availability Zones to use for the subnets in the VPC. The Quick Start uses two Availability Zones from your list and preserves the logical order you specify.",
            "Type": "List<AWS::EC2::AvailabilityZone::Name>",
            "MinLength": 2
        },
        "VpcCidrBlock": {
            "Type": "String",
            "Default": "10.0.0.0/16",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the VPC."
        },
        "PublicSubnetCidrBlock1": {
            "Type": "String",
            "Default": "10.0.0.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the public (DMZ) subnet located in Availability Zone 1."
        },
        "PublicSubnetCidrBlock2": {
            "Type": "String",
            "Default": "10.0.2.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the public (DMZ) subnet located in Availability Zone 2."
        },
        "PrivateSubnetCidrBlock1": {
            "Type": "String",
            "Default": "10.0.1.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the private subnet located in Availability Zone 1."
        },
        "PrivateSubnetCidrBlock2": {
            "Type": "String",
            "Default": "10.0.3.0/24",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format.",
            "Description": "The CIDR block for the private subnet located in Availability Zone 2."
        },
        "AddNatGatewayToPublicSubnet": {
            "Type": "String",
            "Default": "use FortiGate as NAT Gateway",
            "AllowedValues": [
                "use FortiGate as NAT Gateway"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Having NAT gateway is required. This template will add one FortiGate as a NAT gateway for each protected subnet."
        },
        "FortigateInstanceType": {
            "Type": "String",
            "Default": "c5.large",
            "AllowedValues": [
                "t2.small",
                "c5.large",
                "c5.xlarge",
                "c5.2xlarge",
                "c5.4xlarge",
                "c5.9xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Description": "Choose one to launch as FortiGate On-Demand instances. There are t2.small and compute-optimized instances such as c4 and c5 available with different vCPU sizes and bandwidths. For more information about instance types, see https://aws.amazon.com/ec2/instance-types/"
        },
        "ApiGwStageName": {
            "Type": "String",
            "Default": "prod",
            "Description": "A deployment stage name. You can leave it as is."
        },
        "ApiGwResource": {
            "Type": "String",
            "Default": "complete",
            "Description": "An API Gateway resource group name. You can leave it as is."
        },
        "ExpireLifecycleEntry": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Seconds. FortiGate instance lifecycle expiry entry in seconds."
        },
        "ScalingPolicyOptions": {
            "Type": "String",
            "Default": "CPU Utilization",
            "AllowedValues": [
                "CPU Utilization"
            ],
            "ConstraintDescription": "must be a valid String from options.",
            "Description": "This is what scaling policy of Auto-Scaling activities is based on. There is only CPU Utilization specifiable for FortiGate."
        },
        "FortigateAsgCooldown": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "MaxValue": 3600,
            "ConstraintDescription": "must be a valid number between 60 and 3600.",
            "Description": "Seconds. Auto-Scaling group waits for the cool-down period to complete before resuming scaling activities."
        },
        "FortigateAsgDesiredCapacity": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "The number of FortiGate instances the group should have at any time, also called desired capacity. Must keep at least 2 FortiGates in the group for High Availability."
        },
        "FortigateAsgMinSize": {
            "Type": "Number",
            "Default": 2,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Minimum number of FortiGate instances in the Auto-Scaling Group."
        },
        "FortigateAsgMaxSize": {
            "Type": "Number",
            "Default": 4,
            "MinValue": 2,
            "ConstraintDescription": "must be a valid number not less than 2.",
            "Description": "Maximum number of FortiGate instances in the Auto-Scaling Group."
        },
        "FortigateAsgHealthCheckGracePeriod": {
            "Type": "Number",
            "Default": 300,
            "MinValue": 60,
            "ConstraintDescription": "must be a valid number not less than 60.",
            "Description": "Seconds. The length of time that Auto-Scaling waits before checking an instance's health status."
        },
        "FortigateAsgScaleInThreshold": {
            "Type": "Number",
            "Default": 25,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "Percentage. The threshold for the FortiGate Auto-Scaling group to scale-in (remove) 1 instance."
        },
        "FortigateAsgScaleOutThreshold": {
            "Type": "Number",
            "Default": 80,
            "MinValue": 1,
            "MaxValue": 100,
            "ConstraintDescription": "must be a valid number between 1 and 100.",
            "Description": "Percentage. The threshold for the FortiGate Auto-Scaling group to scale-out (add) 1 instance."
        },
        "FortigateElbTgHealthyThreshold": {
            "Type": "Number",
            "Default": 3,
            "MinValue": 3,
            "ConstraintDescription": "must be a valid number not less than 3.",
            "Description": "Healthy threshold for the FortiGate Auto-Scaling Group. The number of consecutive health check failures required before considering a FortiGate instance unhealthy."
        },
        "BalanceWebTrafficOverPort": {
            "Type": "Number",
            "Default": 443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "Balance web service traffic over this port if the internal web-service load balancer is enabled."
        },
        "InternalLoadBalancingOptions": {
            "Type": "String",
            "Default": "add a new internal load balancer",
            "AllowedValues": [
                "add a new internal load balancer",
                "use a load balancer specified below",
                "do not need one"
            ],
            "ConstraintDescription": "must choose from the provided options.",
            "Description": "Add an optional pre-defined load balancer to route traffic to web service in the protected subnets. You can optionally use your own one or decide to not need one."
        },
        "InternalLoadBalancerDnsName": {
            "Type": "String",
            "Description": "If you use your own one, specify the DNS Name of the Elastic Load Balancer which is used in the protected subnets."
        },
        "FortigatePskSecret": {
            "Type": "String",
            "NoEcho": true,
            "Description": "A secret key for the FortiGate instances to securely communicate with each other. It can be of your choice of a string, such as numbers or letters or the combination of them. Should not exceed 128 characters."
        },
        "FortigateAdminPort": {
            "Type": "Number",
            "Default": 8443,
            "MinValue": 1,
            "MaxValue": 65535,
            "ConstraintDescription": "must be a valid port number between 1 and 65535.",
            "Description": "A port number for FortiGate administration. Default to 8443. Do not use: 443, 541, 514, 703."
        },
        "FortigateAdminCidr": {
            "Type": "String",
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]){1}(\\/([0-9]|[1-2][0-9]|3[0-2]))?$",
            "ConstraintDescription": "must be a valid CIDR block format and 0.0.0.0/0 is highly not recommended.",
            "MinLength": 9,
            "Description": "CIDR block for external admin management access. **WARNING!** 0.0.0.0/0 accepts connections from any IP address, please consider a more specific CIDR block that matches your needs."
        },
        "AdminAccessKeyPairName": {
            "Type": "AWS::EC2::KeyPair::KeyName",
            "MinLength": 1,
            "ConstraintDescription": "must specify an admin access key pair for FortiGate instances.",
            "Description": "Amazon EC2 Key Pair for admin access."
        }
    },
    "Conditions": {
        "IfScalingPolicyOnCPU": {
            "Fn::Equals": [
                {
                    "Ref": "ScalingPolicyOptions"
                },
                "CPU Utilization"
            ]
        },
        "IfCustomBalanceWebTrafficOverPort": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        {
                            "Ref": "BalanceWebTrafficOverPort"
                        },
                        "0"
                    ]
                }
            ]
        }
    },
    "Mappings": {
    },
    "Resources": {
        "ftgAutoScaleVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": {
                    "Ref": "VpcCidrBlock"
                },
                "InstanceTenancy": "default",
                "EnableDnsSupport": "true",
                "EnableDnsHostnames": "true"
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "3c7fd1b4-f45f-4996-ace9-7e5b389a8492"
                }
            }
        },
        "publicSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref": "PublicSubnetCidrBlock1"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "0412c443-6dd0-4c8b-a6a9-94d4ef5797b9"
                }
            }
        },
        "publicSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref": "PublicSubnetCidrBlock2"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7b39c958-9912-486f-a04a-ef086a216772"
                }
            }
        },
        "privateSubnet1": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref": "PrivateSubnetCidrBlock1"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        0,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "136b43ac-e4d0-4237-b65d-e81fc511c963"
                }
            }
        },
        "privateSubnet2": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "CidrBlock": {
                    "Ref": "PrivateSubnetCidrBlock2"
                },
                "AvailabilityZone": {
                    "Fn::Select": [
                        1,
                        {
                            "Ref": "AvailabilityZones"
                        }
                    ]
                },
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "17523d64-5d1e-40e3-bcce-362bbf34f598"
                }
            }
        },
        "fgtDhcpOptions": {
            "Type": "AWS::EC2::DHCPOptions",
            "Properties": {
                "DomainName": "ca-central-1.compute.internal",
                "DomainNameServers": [
                    "AmazonProvidedDNS"
                ]
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "f0f1bd98-b9c3-450a-9187-8d641ae2c88a"
                }
            }
        },
        "fgtDhcpOptionsAssoc": {
            "Type": "AWS::EC2::VPCDHCPOptionsAssociation",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                },
                "DhcpOptionsId": {
                    "Ref": "fgtDhcpOptions"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ef1a24e3-e02c-40bc-875c-15f7ca4c6aa5"
                }
            }
        },
        "fgtInternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {},
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "8114a5fb-95a9-4eab-9760-63fc5af83a47"
                }
            }
        },
        "igwAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                },
                "InternetGatewayId": {
                    "Ref": "fgtInternetGateway"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "ac432daf-6e4b-4e95-93dc-31f54afbfcc7"
                }
            }
        },
        "publicSubnetAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "dd193712-7651-43bf-9933-e676b3e60d43"
                }
            }
        },
        "publicSubnetAclEntry1": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Egress": "true",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "publicSubnetAcl"
                }
            },
            "DependsOn": [
                "publicSubnetAcl"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "be38d86f-35dd-4845-bf0c-88819da1eeca"
                }
            }
        },
        "publicSubnetAclEntry2": {
            "Type": "AWS::EC2::NetworkAclEntry",
            "Properties": {
                "CidrBlock": "0.0.0.0/0",
                "Protocol": "-1",
                "RuleAction": "allow",
                "RuleNumber": "100",
                "NetworkAclId": {
                    "Ref": "publicSubnetAcl"
                }
            },
            "DependsOn": [
                "publicSubnetAcl"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "08e86679-730e-42e9-8a66-1d260d4241e9"
                }
            }
        },
        "publicSubnet1AclAssoc": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "publicSubnetAcl"
                },
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            },
            "DependsOn": [
                "publicSubnetAcl",
                "publicSubnet1"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "6e3a2eb3-6d2d-4726-8a19-e3be51bf59ff"
                }
            }
        },
        "publicSubnet2AclAssoc": {
            "Type": "AWS::EC2::SubnetNetworkAclAssociation",
            "Properties": {
                "NetworkAclId": {
                    "Ref": "publicSubnetAcl"
                },
                "SubnetId": {
                    "Ref": "publicSubnet2"
                }
            },
            "DependsOn": [
                "publicSubnetAcl",
                "publicSubnet2"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "5beb1f02-8a58-4b77-a707-dcc957e23161"
                }
            }
        },
        "publicSubnetRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "12cc0121-0b53-4ba0-9de8-6405f272c3a2"
                }
            }
        },
        "publicSubnet1RouteTableAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnetRouteTable"
                },
                "SubnetId": {
                    "Ref": "publicSubnet1"
                }
            },
            "DependsOn": [
                "publicSubnetRouteTable",
                "publicSubnet1"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "81404f73-105b-405b-913c-9b76a5353ebf"
                }
            }
        },
        "publicSubnet2RouteTableAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "publicSubnetRouteTable"
                },
                "SubnetId": {
                    "Ref": "publicSubnet2"
                }
            },
            "DependsOn": [
                "publicSubnetRouteTable",
                "publicSubnet2"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "81404f73-105b-405b-913c-9b76a5353ebf"
                }
            }
        },
        "privateSubnetAcl": {
            "Type": "AWS::EC2::NetworkAcl",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "00fc6a8c-b303-4bb8-8c22-1dd366c67afe"
                }
            }
        },
        "publicSubnetRoute1": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "DestinationCidrBlock": "0.0.0.0/0",
                "RouteTableId": {
                    "Ref": "publicSubnetRouteTable"
                },
                "GatewayId": {
                    "Ref": "fgtInternetGateway"
                }
            },
            "DependsOn": [
                "igwAttachment"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "7a41968e-6da5-4acc-b4ff-ceb6f00e64c5"
                }
            }
        },
        "privateSubnet1RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01e0d5a7-6e71-4145-beb8-2c381eaac9d2"
                }
            }
        },
        "privateSubnet2RouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "01e0d5a7-6e71-4145-beb8-2c381eaac9d2"
                }
            }
        },
        "privateSubnet1RouteTableAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet1RouteTable"
                },
                "SubnetId": {
                    "Ref": "privateSubnet1"
                }
            },
            "DependsOn": [
                "privateSubnet1RouteTable",
                "privateSubnet1"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "81404f73-105b-405b-913c-9b76a5353ebf"
                }
            }
        },
        "privateSubnet2RouteTableAssoc": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "privateSubnet2RouteTable"
                },
                "SubnetId": {
                    "Ref": "privateSubnet2"
                }
            },
            "DependsOn": [
                "privateSubnet2RouteTable",
                "privateSubnet2"
            ],
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "81404f73-105b-405b-913c-9b76a5353ebf"
                }
            }
        },
        "sgFortigateAutoscale": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "FortiGate security group",
                "VpcId": {
                    "Ref": "ftgAutoScaleVPC"
                }
            },
            "Metadata": {
                "AWS::CloudFormation::Designer": {
                    "id": "1416f8a0-7e73-40ea-9f8b-59a6294cc707"
                }
            }
        },
        "fgtSecurityGroupIngressInternal": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgFortigateAutoscale"
                },
                "IpProtocol": "-1",
                "CidrIp": {
                    "Fn::GetAtt": [
                        "ftgAutoScaleVPC",
                        "CidrBlock"
                    ]
                }
            }
        },
        "fgtSecurityGroupIngressSSH": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgFortigateAutoscale"
                },
                "IpProtocol": "tcp",
                "FromPort": "22",
                "ToPort": "22",
                "CidrIp": {
                    "Ref": "FortigateAdminCidr"
                }
            }
        },
        "fgtSecurityGroupIngress1": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgFortigateAutoscale"
                },
                "IpProtocol": "tcp",
                "FromPort": "541",
                "ToPort": "541",
                "CidrIp": {
                    "Ref": "FortigateAdminCidr"
                }
            }
        },
        "fgtSecurityGroupIngressAdminAccess": {
            "Type": "AWS::EC2::SecurityGroupIngress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgFortigateAutoscale"
                },
                "IpProtocol": "tcp",
                "FromPort": {
                    "Ref": "FortigateAdminPort"
                },
                "ToPort": {
                    "Ref": "FortigateAdminPort"
                },
                "CidrIp": {
                    "Ref": "FortigateAdminCidr"
                }
            }
        },
        "fgtSecurityGroupEgressInternal": {
            "Type": "AWS::EC2::SecurityGroupEgress",
            "Properties": {
                "GroupId": {
                    "Ref": "sgFortigateAutoscale"
                },
                "IpProtocol": "-1",
                "CidrIp": "0.0.0.0/0"
            }
        },
        "StackFortigateAutoScaleSolution": {
            "Type": "AWS::CloudFormation::Stack",
            "Properties": {
                "Parameters": {
                    "CustomIdentifier": {
                        "Ref": "CustomIdentifier"
                    },
                    "AvailabilityZone1": {
                        "Fn::Select": [
                            0,
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "AvailabilityZone2": {
                        "Fn::Select": [
                            1,
                            {
                                "Ref": "AvailabilityZones"
                            }
                        ]
                    },
                    "VpcId": {
                        "Ref": "ftgAutoScaleVPC"
                    },
                    "PublicSubnet1": {
                        "Ref": "publicSubnet1"
                    },
                    "PublicSubnet2": {
                        "Ref": "publicSubnet2"
                    },
                    "PrivateSubnet1": {
                        "Ref": "privateSubnet1"
                    },
                    "PrivateSubnet2": {
                        "Ref": "privateSubnet2"
                    },
                    "PrivateSubnet1RouteTable": {
                        "Ref": "privateSubnet1RouteTable"
                    },
                    "PrivateSubnet2RouteTable": {
                        "Ref": "privateSubnet2RouteTable"
                    },
                    "AddNatGatewayToPublicSubnet": {
                        "Ref": "AddNatGatewayToPublicSubnet"
                    },
                    "FgtAutoScaleSecurityGroup": {
                        "Ref": "sgFortigateAutoscale"
                    },
                    "FortigateInstanceType": {
                        "Ref": "FortigateInstanceType"
                    },
                    "ApiGwStageName": {
                        "Ref": "ApiGwStageName"
                    },
                    "ApiGwResource": {
                        "Ref": "ApiGwResource"
                    },
                    "ExpireLifecycleEntry": {
                        "Ref": "ExpireLifecycleEntry"
                    },
                    "QSS3BucketName": {
                        "Ref": "QSS3BucketName"
                    },
                    "QSS3KeyPrefix": {
                        "Ref": "QSS3KeyPrefix"
                    },
                    "ScalingPolicyOptions": {
                        "Ref": "ScalingPolicyOptions"
                    },
                    "FortigateAsgCooldown": {
                        "Ref": "FortigateAsgCooldown"
                    },
                    "FortigateAsgDesiredCapacity": {
                        "Ref": "FortigateAsgDesiredCapacity"
                    },
                    "FortigateAsgMinSize": {
                        "Ref": "FortigateAsgMinSize"
                    },
                    "FortigateAsgMaxSize": {
                        "Ref": "FortigateAsgMaxSize"
                    },
                    "FortigateAsgHealthCheckGracePeriod": {
                        "Ref": "FortigateAsgHealthCheckGracePeriod"
                    },
                    "FortigateAsgScaleInThreshold": {
                        "Ref": "FortigateAsgScaleInThreshold"
                    },
                    "FortigateAsgScaleOutThreshold": {
                        "Ref": "FortigateAsgScaleOutThreshold"
                    },
                    "FortigateElbTgHealthyThreshold": {
                        "Ref": "FortigateElbTgHealthyThreshold"
                    },
                    "BalanceWebTrafficOverPort": {
                        "Ref": "BalanceWebTrafficOverPort"
                    },
                    "InternalLoadBalancingOptions": {
                        "Ref": "InternalLoadBalancingOptions"
                    },
                    "InternalLoadBalancerDnsName": {
                        "Ref": "InternalLoadBalancerDnsName"
                    },
                    "FortigatePskSecret": {
                        "Ref": "FortigatePskSecret"
                    },
                    "FortigateAdminPort": {
                        "Ref": "FortigateAdminPort"
                    },
                    "FortigateAdminCidr": {
                        "Ref": "FortigateAdminCidr"
                    },
                    "AdminAccessKeyPairName": {
                        "Ref": "AdminAccessKeyPairName"
                    }
                },
                "TemplateURL": {
                    "Fn::Sub": [
                        "https://${QSS3BucketName}.s3.amazonaws.com/${QSS3KeyPrefix}/templates/workload.template",
                        {
                            "QSS3BucketName": {
                                "Ref": "QSS3BucketName"
                            },
                            "QSS3KeyPrefix": {
                                "Ref": "QSS3KeyPrefix"
                            }
                        }
                    ]
                },
                "TimeoutInMinutes": "30"
            }
        }
    },
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "Basic Configuration"
                    },
                    "Parameters": [
                        "CustomIdentifier",
                        "QSS3BucketName",
                        "QSS3KeyPrefix"
                    ]
                },
                {
                    "Label": {
                        "default": "Network Configuration"
                    },
                    "Parameters": [
                        "AvailabilityZones",
                        "VpcCidrBlock",
                        "PublicSubnetCidrBlock1",
                        "PublicSubnetCidrBlock2",
                        "PrivateSubnetCidrBlock1",
                        "PrivateSubnetCidrBlock2",
                        "AddNatGatewayToPublicSubnet"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate Configuration"
                    },
                    "Parameters": [
                        "FortigateInstanceType",
                        "FortigatePskSecret",
                        "FortigateAdminPort",
                        "FortigateAdminCidr",
                        "AdminAccessKeyPairName"
                    ]
                },
                {
                    "Label": {
                        "default": "FortiGate Auto-Scaling Group Configuration"
                    },
                    "Parameters": [
                        "ExpireLifecycleEntry",
                        "FortigateAsgDesiredCapacity",
                        "FortigateAsgMinSize",
                        "FortigateAsgMaxSize",
                        "FortigateAsgHealthCheckGracePeriod",
                        "FortigateAsgCooldown",
                        "ScalingPolicyOptions",
                        "FortigateAsgScaleOutThreshold",
                        "FortigateAsgScaleInThreshold",
                        "FortigateElbTgHealthyThreshold"
                    ]
                },
                {
                    "Label": {
                        "default": "Load Balancing Configuration"
                    },
                    "Parameters": [
                        "InternalLoadBalancingOptions",
                        "InternalLoadBalancerDnsName",
                        "BalanceWebTrafficOverPort"
                    ]
                },
                {
                    "Label": {
                        "default": "Lambda Function and API Gateway Configuration"
                    },
                    "Parameters": [
                        "LambdaDeploymentMethod",
                        "QSS3BucketName",
                        "QSS3KeyPrefix",
                        "ApiGwStageName",
                        "ApiGwResource"
                    ]
                }
            ],
            "ParameterLabels": {
                "CustomIdentifier": {
                    "default": "Resource Name Prefix"
                },
                "AvailabilityZones": {
                    "default": "Availability Zones"
                },
                "VpcCidrBlock": {
                    "default": "VPC CIDR Block"
                },
                "PublicSubnetCidrBlock1": {
                    "default": "Public Subnet 1 CIDR"
                },
                "PublicSubnetCidrBlock2": {
                    "default": "Public Subnet 2 CIDR"
                },
                "PrivateSubnetCidrBlock1": {
                    "default": "Private Subnet 1 CIDR"
                },
                "PrivateSubnetCidrBlock2": {
                    "default": "Private Subnet 2 CIDR"
                },
                "AddNatGatewayToPublicSubnet": {
                    "default": "NAT Gateway Options"
                },
                "FortigateInstanceType": {
                    "default": "Instance Type"
                },
                "LambdaDeploymentMethod": {
                    "default": "Deployment Method"
                },
                "QSS3BucketName": {
                    "default": "S3 Bucket Name"
                },
                "QSS3KeyPrefix": {
                    "default": "S3 Key Prefix"
                },
                "ApiGwStageName": {
                    "default": "API Gateway Stage Name"
                },
                "ApiGwResource": {
                    "default": "API Gateway Resource Group Name"
                },
                "ExpireLifecycleEntry": {
                    "default": "Instance Lifecycle Expiry"
                },
                "ScalingPolicyOptions": {
                    "default": "Scaling Policy Options"
                },
                "FortigateAsgCooldown": {
                    "default": "Scaling Cooldown Period"
                },
                "FortigateAsgDesiredCapacity": {
                    "default": "Desired Capacity"
                },
                "FortigateAsgMinSize": {
                    "default": "Minimum Group Size"
                },
                "FortigateAsgMaxSize": {
                    "default": "Maximum Group size"
                },
                "FortigateAsgHealthCheckGracePeriod": {
                    "default": "Health Check Grace Period"
                },
                "FortigateAsgScaleInThreshold": {
                    "default": "Scale-in Threshold (%)"
                },
                "FortigateAsgScaleOutThreshold": {
                    "default": "Scale-out Threshold (%)"
                },
                "FortigateElbTgHealthyThreshold": {
                    "default": "Healthy Threshold"
                },
                "BalanceWebTrafficOverPort": {
                    "default": "Web Service Traffic Port"
                },
                "InternalLoadBalancingOptions": {
                    "default": "Internal Load Balancing Options"
                },
                "InternalLoadBalancerDnsName": {
                    "default": "Internal Load Balancer DNS Name"
                },
                "FortigateAdminPort": {
                    "default": "Admin Access Port"
                },
                "FortigateAdminCidr": {
                    "default": "Admin Access CIDR Block"
                },
                "AdminAccessKeyPairName": {
                    "default": "Admin Access Key Pair"
                }
            }
        }
    }
}
